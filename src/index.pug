include ./components/slider
include ./components/textfield

-const points = '50,100,200,300,400,500,600,700,800,900,A100,A200,A400,A700'.split(',');
-const themes = new Array(38).fill(0);
html(lang="en")
    head
        meta(charset="UTF-8")
        meta(name="viewport" content="width=device-width, initial-scale=1.0")
        meta(http-equiv="X-UA-Compatible" content="ie=edge")
        title="Material Theme Creator"
        link(rel="stylesheet" href="styles.css")
    body
        input(type="checkbox" id="switch-theme" class="visually-hidden")
        .page
            .theme-background
            main
                .header
                    include  ./components/switch-theme
                    h1="Material Theme Creator"
                p
                    a(href="https://github.com/Artik-Man/material-theme-creator" target="_blank")="GitHub"
                    | &nbsp; | &nbsp;
                    a(href="https://artik-man.github.io/material-theme-creator-demo-page/" target="_blank")="Demo page"

                section
                    h2 Create a custom&nbsp;theme from&nbsp;one&nbsp;color in&nbsp;real&nbsp;time. It's&nbsp;pure&nbsp;CSS, without&nbsp;JavaScript

                    .create-theme
                        h3 Hue
                        .value.-h
                        +slider(0,360,220,1,"Hue","creator-h")
                        h3 Saturation
                        .value.-s
                        +slider(0,100,80,1,"Saturation","creator-s")
                        h3 Lightness
                        .value.-l
                        +slider(0,100,60,1,"Lightness","creator-l")
                        h3 Contrast threshold
                        .value.-cc="65%"
                        +slider(0,100,65,1,"Contrast threshold","creator-cc")

                    .your-theme

                        each point in points
                            span.point(data-point=point)=point
                                .info
                                    | var(--my-theme-#{point}) <br><br>
                                    | hsla(<br>
                                    | &nbsp; var(--my-theme-#{point})-h,<br>
                                    | &nbsp; var(--my-theme-#{point})-s,<br>
                                    | &nbsp; var(--my-theme-#{point})-l,<br>
                                    | &nbsp; 100%,<br>
                                    | )
                    form.download-theme#form
                        +textfield('theme-name', "Theme name", 'my-theme')
                        button.mdc-button.mdc-button--raised
                            span.mdc-button__label Download
                                span.hidden-xs &nbsp;theme

                section
                    h2 Contents
                    ul.table-of-contents
                        li
                            a(href="#article-how-it-works") How it works
                        li
                            a(href="#article-how-to-use-it") How to use Material Theme Creator
                            ol
                                li
                                    a(href="#acricle-pure-css") Pure CSS use
                                li
                                    a(href="#article-scss") Use with SCSS
                                li
                                    a(href="#article-angular-material") Use with Angular Material
                        li
                            a(href="#article-testing") Testing


                section
                    h2#article-how-it-works How it works

                    p We use CSS Custom Properties and HSL color space for dynamic theme colorsâ€™ calculation.
                    pre
                        code.language-scss
                            | :root {
                            |   --primary-h: 260;
                            |   --primary-s: 80%;
                            |   --primary-l: 40%;
                            |   --primary: hsl( var(--primary-h), var(--primary-s), var(--primary-l) );
                            | }

                    p We have already created a color consisting of H, S and L components of the HSL color space. But how can we create the whole theme palette? We need to do some calculations for this.

                    pre
                        code.language-scss
                            | :root {
                            |   --primary-400: hsl(
                            |                       calc( var(--primary-h) * var(--h-400) ),
                            |                       calc( var(--primary-s) * var(--s-400) ),
                            |                       calc( var(--primary-l) * var(--l-400) )
                            |                   );
                            |   --primary-500: hsl(
                            |                       calc( var(--primary-h) * var(--h-500) ),
                            |                       calc( var(--primary-s) * var(--s-500) ),
                            |                       calc( var(--primary-l) * var(--l-500) )
                            |                   );
                            | }

                    p In fact, the code is a bit more complicated, but this piece of code is enough to understand the algorithm.

                section
                    h2#article-how-to-use-it How to use Material Theme Creator
                    section
                        h3#acricle-pure-css 1. Pure CSS use

                        p You can download your theme by clicking on the button "Download theme" which is located above. Then you should include it to your page in any convenient way. For example:

                        pre
                            code.language-html
                                | &lt;link href="./my-theme.css" rel="stylesheet"&gt;

                        p After that you can create the second theme style:

                        pre
                            code.language-css
                                | .second-theme {
                                |    --my-theme-h: 190;
                                |    --my-theme-s: 80;
                                |    --my-theme-l: 40;
                                |    --my-theme-contrast-threshold: 50%;
                                | }

                        p And you can apply the theme with some button:

                        pre
                            code.language-javascript
                                | const changeThemeButton = document.querySelector('button.change-theme-bth');
                                | changeThemeButton.addEventListener('click', () => {
                                |     document.documentElement.classList.toggle('second-theme');
                                | });

                        p How can you use theme on your elements? 14 theme colors will be available for you. For each of these colors you will have access to one contrasting color. See example:

                        pre
                            code.language-scss
                                |  button {
                                |      background-color: var(--my-theme);
                                |      color: var(--my-theme-contrast);
                                |      &:hover {
                                |          background-color: var(--my-theme-700);
                                |          color: var(--my-theme-700-contrast);
                                |      }
                                |  }

                        p How can we set transparency of the color? You can adjust it yourself:

                        pre
                            code.language-scss
                                |      background-color: hsla(
                                |                           var(--my-theme-500-h),
                                |                           var(--my-theme-500-s),
                                |                           var(--my-theme-500-l),
                                |                           62% /* alpha */
                                |                        );

                    section
                        h3#article-scss 2. Use with SCSS

                        p You can have more options to manage the theme if you use SCSS. <br> Installation:

                        pre
                            code.language-bash
                                | npm install material-theme-creator

                        p Use:

                        pre
                            code.language-scss
                              | @use "~material-theme-creator/core" as mtc;
                              |
                              | // root variables initializing
                              | @include mtc.init();
                              |
                              | body {
                              |     // Creating a theme based on some color
                              |     // Passing arguments to the mixin:
                              |     //   1. theme name
                              |     //   2. some color
                              |     //   3. contrast threshold (for fonts)
                              |      @include mtc.create-variables-from-color('primary', #cc3300, 50%);
                              | }
                              |
                              | body.secondary-theme {
                              |     @include mtc.update-theme('primary', #6200ee, 55%);
                              | }
                              |
                              | button {
                              |     color: mtc.color-contrast('primary');
                              |     background-color: mtc.color('primary');
                              |     &:hover {
                              |         color: mtc.color-contrast('primary', 700);
                              |         background-color: mtc.color('primary', 700, 92%);
                              |     }
                              | }
                    section
                        h3#article-angular-material 3. Use with &nbsp;
                            a(href="https://material.angular.io/" target="_blank") Angular Material

                        p You can use ngx-mtc module to convert Angular Material themes to use CSS Custom Properties.

                        section
                            h4 3.1 Setup
                                pre
                                    code.language-scss
                                      | @use '~@angular/material' as mat;
                                      | @use "~material-theme-creator/ngx-mtc" as ngx-mtc;
                                      | @import '~@angular/material/theming';
                                      |
                                      | @include mat.core();
                                      | @include ngx-mtc.init();
                                      |
                                      | $primary-map: ngx-mtc.create-theme-map('primary');
                                      | $accent-map: ngx-mtc.create-theme-map('accent');
                                      | $warn-map: ngx-mtc.create-theme-map('warn');

                        p We have two options for creating of themes:

                        section.attention-section.info
                            p.label Recommended
                            h4 3.2 Creating theme from one color

                            p In this case, each theme will consist of just a few lines of code.

                            pre
                                code.language-scss
                                  | :root {
                                  |     --is-dark-theme: 1; // Is dark theme? 1 or 0;
                                  |     @include ngx-mtc.theme-base(); // Creates base colors
                                  |
                                  |     // Creates theme colors
                                  |     @include ngx-mtc.create-variables-from-color('primary', #009688, 38%);
                                  |     @include ngx-mtc.create-variables-from-color('accent', #2196f3, 57%);
                                  |     @include ngx-mtc.create-variables-from-color('warn', #f44336, 62%);
                                  | }
                                  |
                                  | $primary-palette: mat.define-palette($primary-map);
                                  | $accent-palette: mat.define-palette($accent-map);
                                  | $warn-palette: mat.define-palette($warn-map);
                                  |
                                  | // Custom theme
                                  | $theme: ngx-mtc.ngx-mtc-custom-theme(
                                  |     $primary-palette,
                                  |     $accent-palette,
                                  |     $warn-palette,
                                  | );
                                  |
                                  |     // Creates Angular Material Theme
                                  | @include mat.all-component-themes($theme);

                            p The second theme code:

                            pre
                                code.language-scss
                                | html.second-theme {
                                |     --is - dark - theme: 0;
                                |     @include ngx-mtc.update-theme('primary', #142148, 45%);
                                |     @include ngx-mtc.update-theme('accent', #658e14, 50%);
                                |     @include ngx-mtc.update-theme('warn', #750101, 50%);
                                | }

                        section.attention-section.warning
                            p.label Not recommended
                            h4 3.3 Converting true Angular Material themes to using CSS Custom Properties

                            p The mat.define-light-theme() mixin generates a lot of CSS code for each theme, so you shouldn't use this method.

                            pre
                                code.language-scss
                                    | :root {
                                    |   @include ngx-mtc.create-variables-from-map('primary', $mat-teal);
                                    |   @include ngx-mtc.create-variables-from-map('accent', $mat-deep-purple);
                                    |   @include ngx-mtc.create-variables-from-map('warn', $mat-red);
                                    | }
                                    |
                                    | // Light theme
                                    | @include mat.core-theme(
                                    |     mat.define-light-theme((
                                    |         color: (
                                    |             primary: $primary-map,
                                    |             accent: $accent-map,
                                    |             warn: $warn-map
                                    |         )
                                    |     ))
                                    | );
                                    |
                                    | // Dark theme
                                    | // @include mat.core-theme(
                                    | //     mat.define-dark-theme((
                                    | //         color: (
                                    | //             primary: $primary-map,
                                    | //             accent: $accent-map,
                                    | //             warn: $warn-map
                                    | //         )
                                    | //     ))
                                    | // );
                                    |

                            p In this case the second theme is recommended to be moved into the external CSS file and included as follows:

                            pre
                                code.language-html
                                    | &lt;link href="./second-theme.css" rel="stylesheet"&gt;

                            p The second theme code:

                            pre
                                code.language-scss
                                    | // second-theme.scss
                                    | :root {
                                    |   @include ngx-mtc.update-theme('primary', #142148, 45%);
                                    |   @include ngx-mtc.update-theme('accent', #658e14, 50%);
                                    |   @include ngx-mtc.update-theme('warn', #750101, 50%);
                                    | }
                                    |
                                    |
                                    | // If both themes are light or dark, then you can skip
                                    | //   the following part of code to save the user's traffic
                                    |
                                    | // Light theme
                                    | @include mat.core-theme(
                                    |     mat.define-light-theme((
                                    |         color: (
                                    |             primary: $primary-map,
                                    |             accent: $accent-map,
                                    |             warn: $warn-map
                                    |         )
                                    |     ))
                                    | );
                                    |
                                    | // Dark theme
                                    | // @include mat.core-theme(
                                    | //     mat.define-dark-theme((
                                    | //         color: (
                                    | //             primary: $primary-map,
                                    | //             accent: $accent-map,
                                    | //             warn: $warn-map
                                    | //         )
                                    | //     ))
                                    | // );


                        section
                            h4 3.4 How to use it
                                p Use standard Angular material mat-color and mat-contrast mixins to extract specific colors from the theme.
                                pre
                                    code.language-scss
                                        | button {
                                        |   color: mat.contrast($primary-map, 500);
                                        |   background-color: mat.color($primary-map, 500);
                                        |   &:hover {
                                        |     color: mat.contrast($primary-map, 700);
                                        |     background-color: mat.color($primary-map, 700, 92%);
                                        |   }
                                        | }
                section
                    h2#article-testing
                        | Testing [
                        code @mixin mtc-create-variables-from-color
                        | ]
                    .themes
                        each theme in themes
                            .theme
                                each point in points
                                    span.point(data-point=point)=point
