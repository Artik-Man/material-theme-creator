/*

  Material Theme Creator
  Version: 2.0.6

  Author: Artik Man [mail@artik.me, github.com/Artik-Man]
  Docs: https://artik-man.github.io/material-theme-creator/
  GitHub: https://github.com/Artik-Man/material-theme-creator

*/

/*
// Using with pure css

@include mtc-init();
body {
  @include create-variables-from-color('primary', #149c75, 52%);
  @include create-variables-from-color('warn', #d61f0c);

  a {
    color: var(--primary);
    &:hover{
      color: var(--primary-900);
    }
  }

  .warning {
    background: var(--warn-100);
    color: var(--warn-700);
  }
}
*/

/*
// Using with angular material (create theme from 3 colors)

@include mtc-init();
body {
  @include create-variables-from-color('primary', #149c75, 52%);
  @include create-variables-from-color('accent', #19a4b6, 52%);
  @include create-variables-from-color('warn', #d61f0c, 52%);

  $primary-map: create-theme-map('primary');
  $accent-map: create-theme-map('accent');
  $warn-map: create-theme-map('warn');

  @include angular-material-theme(mat-light-theme(mat-palette($primary-map), mat-palette($accent-map), mat-palette($warn-map))); // Light them
//@include angular-material-theme(mat-dark-theme( mat-palette($primary-map), mat-palette($accent-map), mat-palette($warn-map))); // Dark theme
}
 */

/*
// Using with angular material (create theme from 3 color maps)

@include mtc-init();
body {
  @include create-variables-from-map('primary', $mat-teal);
  @include create-variables-from-map('accent', $mat-purple);
  @include create-variables-from-map('warn', $mat-red);

  $primary-map: create-theme-map('primary');
  $accent-map: create-theme-map('accent');
  $warn-map: create-theme-map('warn');

  @include angular-material-theme(mat-light-theme(mat-palette($primary-map), mat-palette($accent-map), mat-palette($warn-map))); // Light them
  //@include angular-material-theme(mat-dark-theme( mat-palette($primary-map), mat-palette($accent-map), mat-palette($warn-map))); // Dark theme
}
 */

/*
  Description:
    Creates a theme-map for use in Angular Material
*/
@function create-theme-map($theme-name) {
  @return (
          50: #{'var(--' + $theme-name + '-50, #eee)'},
          100:#{'var(--' + $theme-name + '-100, #ddd)'},
          200:#{'var(--' + $theme-name + '-200, #ccc)'},
          300:#{'var(--' + $theme-name + '-300, #aaa)'},
          400:#{'var(--' + $theme-name + '-400, #999)'},
          500:#{'var(--' + $theme-name + '-500, #777)'},
          600:#{'var(--' + $theme-name + '-600, #666)'},
          700:#{'var(--' + $theme-name + '-700, #555)'},
          800:#{'var(--' + $theme-name + '-800, #333)'},
          900:#{'var(--' + $theme-name + '-900, #222)'},
          A100:#{'var(--' + $theme-name + '-A100, #c00)'},
          A200:#{'var(--' + $theme-name + '-A200, #900)'},
          A400:#{'var(--' + $theme-name + '-A400, #700)'},
          A700:#{'var(--' + $theme-name + '-A700, #500)'},
          contrast: (
                  50: #{'var(--' + $theme-name + '-50-contrast, 50%)'},
                  200:#{'var(--' + $theme-name + '-200-contrast, 50%)'},
                  300:#{'var(--' + $theme-name + '-300-contrast, 50%)'},
                  100:#{'var(--' + $theme-name + '-100-contrast, 50%)'},
                  400:#{'var(--' + $theme-name + '-400-contrast, 50%)'},
                  500:#{'var(--' + $theme-name + '-500-contrast, 50%)'},
                  600:#{'var(--' + $theme-name + '-600-contrast, 50%)'},
                  700:#{'var(--' + $theme-name + '-700-contrast, 50%)'},
                  800:#{'var(--' + $theme-name + '-800-contrast, 50%)'},
                  900:#{'var(--' + $theme-name + '-900-contrast, 50%)'},
                  A100:#{'var(--' + $theme-name + '-A100-contrast, 50%)'},
                  A200:#{'var(--' + $theme-name + '-A200-contrast, 50%)'},
                  A400:#{'var(--' + $theme-name + '-A400-contrast, 50%)'},
                  A700:#{'var(--' + $theme-name + '-A700-contrast, 50%)'},
          )
  );
}

/*
  Input:
    $theme-name: string (example: 'primary');
    $theme-map: SASS Map (https://sass-lang.com/documentation/values/maps);

  You can use theme-map from ~@angular/material/theming (e.g. $mat-orange or $mat-light-green...)

  Theme Map Example:
    (
       50: #ffebee,
      100: #ffcdd2,
      200: #ef9a9a,
      300: #e57373,
      400: #ef5350,
      500: #f44336,
      600: #e53935,
      700: #d32f2f,
      800: #c62828,
      900: #b71c1c,
      A100: #ff8a80,
      A200: #ff5252,
      A400: #ff1744,
      A700: #d50000,
      contrast: (
         50: #000,
        100: #000,
        200: #000,
        300: #000,
        400: #000,
        500: #fff,
        600: #fff,
        700: #fff,
        800: #fff,
        900: #fff,
        A100: #000,
        A200: #fff,
        A400: #fff,
        A700: #fff,
      )
    )

  Output:
    --primary: hsl(...);
    --primary-50: hsl(...);
    --primary-50-contrast: hsl(...);
    --primary-100: hsl(...);
    --primary-100-contrast: hsl(...);
    ...
    --primary-A700: hsl(...);
    --primary-A700-contrast: hsl(...);
*/
@mixin create-variables-from-map($theme-name, $theme-map) {
  // color: var(--primary)
  --#{$theme-name}: #{map-get($theme-map, 500)};

  $arr_names: 50, 100, 200, 300, 400, 500, 600, 700, 800, 900, A100, A200, A400, A700;
  @for $i from 1 through 14 {
    // color: var(--primary-300)
    $index: nth($arr_names, $i);
    --#{$theme-name}-#{$index}: #{map-get($theme-map, $index)};
    --#{$theme-name}-#{$index}-contrast: #{map-get(map-get($theme-map, contrast), $index)};
  }
}

/*
  Input:
    $theme-name: string (example: 'primary');
    $color: CSS Color (#hex/rgb,hsl);
    $contrast-threshold: 0%..100% (default: 50%);

  Output:
    --primary: hsl(...);
    --primary-50: hsl(...);
    --primary-50-contrast: hsl(...);
    --primary-100: hsl(...);
    --primary-100-contrast: hsl(...);
    ...
    --primary-A700: hsl(...);
    --primary-A700-contrast: hsl(...);
*/
@mixin create-variables-from-color($theme-name, $color, $contrast-threshold:50%) {
  @include create-color($color, $theme-name);

  --#{$theme-name + '-contrast-threshold'}: #{$contrast-threshold};

  $theme-h: '--' + $theme-name + '-h';
  $theme-s: '--' + $theme-name + '-s';
  $theme-l: '--' + $theme-name + '-l';

  $arr_50_400: 50, 100, 200, 300, 400;
  @for $i from 1 through 5 {
    $index: nth($arr_50_400, $i);
    --#{$theme-name}-#{$index}: hsl(
                    var(#{$theme-h}),
                    calc(((var(#{$theme-s}) - var(--mtc-light-s)) * var(#{'--mtc-s-' + $index}) + var(--mtc-light-s)) * 1%),
                    calc(((var(#{$theme-l}) - var(--mtc-light-l)) * var(#{'--mtc-l-' + $index}) + var(--mtc-light-l)) * 1%)
    );
    --#{$theme-name}-#{$index}-contrast: hsl(
                    0,
                    0%,
                    calc(((((1 - var(#{'--mtc-l-' + $index})) * 100 + var(#{'--mtc-l-' + $index}) * var(#{$theme-l})) * 1%) - var(#{'--' + $theme-name + '-contrast-threshold'}, 50%)) * (-100))
    );
  }

  --#{$theme-name + '-500'}: var(--#{$theme-name});
  --#{$theme-name + '-500-contrast'}: hsl(0, 0%, calc(((var(#{$theme-l}) * 1%) - var(#{'--' + $theme-name + '-contrast-threshold'}, 50%)) * (-100)));

  $arr_600_900: 600, 700, 800, 900;
  @for $i from 1 through 4 {
    $index: nth($arr_600_900, $i);
    --#{$theme-name}-#{$index}: hsl(
                    var(#{$theme-h}),
                    calc(((1 - var(#{'--mtc-s-' + $index})) * 100 + var(#{'--mtc-s-' + $index}) * var(#{$theme-s})) * 1%),
                    calc(((1 - var(#{'--mtc-l-' + $index})) * var(#{$theme-l}) * var(#{$theme-l}) / 100 + var(#{'--mtc-l-' + $index}) * var(#{$theme-l})) * 1%)
    );
    --#{$theme-name}-#{$index}-contrast: hsl(
                    0,
                    0%,
                    calc(
                            ((((1 - var(#{'--mtc-l-' + $index})) * var(#{$theme-l}) * var(#{$theme-l}) / 100 + var(#{'--mtc-l-' + $index}) * var(#{$theme-l})) * 1%) -
                            var(#{'--' + $theme-name + '-contrast-threshold'}, 50%)) * (-100)
                    )
    );
  }

  $arr_A00_A700: A100, A200, A400, A700;
  @for $i from 1 through 4 {
    $index: nth($arr_A00_A700, $i);
    --#{$theme-name}-#{$index}: hsl(calc(var(#{$theme-h}) * var(#{'--mtc-h-' + $index})), calc(var(#{'--mtc-s-' + $index}) * 100%), calc(var(#{'--mtc-l-' + $index}) * 100%));
    --#{$theme-name}-#{$index}-contrast: hsl(0, 0%, calc((var(#{'--mtc-l-' + $index}) * 100% - var(#{'--' + $theme-name + '-contrast-threshold'}, 50%)) * (-100)));
  }
}

/*
  Description:
    Returns the Hue, Lightness and Saturation for CSS Color

  Input:
    $color: CSS Color (#hex/rgb,hsl);
    $name: string (example: 'primary');

  Output:
    --primary-h: 212;
    --primary-s: 95;
    --primary-l: 80;
    --primary: hsl(var(--primary-h), var(--primary-s), var(--primary-l));
*/
@mixin create-color($color, $name) {
  --#{$name}-h: #{str-slice(hue($color) + '', 0, -4)};
  --#{$name}-s: #{str-slice(saturation($color) + '', 0, -2)};
  --#{$name}-l: #{str-slice(lightness($color) + '', 0, -2)};
  --#{$name}: hsl(var(--#{$name}-h), calc(var(--#{$name}-s) * 1%), calc(var(--#{$name}-l) * 1%));
}

/*
  Description:
    Creates CSS Variables used in the "create-variables-from-color" mixin
*/
@mixin mtc-init() {
  // FIX: "Could not find Angular Material core theme. Most Material components may not work as expected."
  .mat-theme-loaded-marker {
    display: none;
  }

  :root {
    --mtc-h-A100: 1;
    --mtc-h-A200: 1;
    --mtc-h-A400: 1;
    --mtc-h-A700: 1.01;

    --mtc-s-50: 0.91;
    --mtc-s-100: 0.98;
    --mtc-s-200: 0.96;
    --mtc-s-300: 0.95;
    --mtc-s-400: 0.96;
    --mtc-s-600: 1;
    --mtc-s-700: 0.99;
    --mtc-s-800: 0.89;
    --mtc-s-900: 0.86;
    --mtc-s-A100: 0.89;
    --mtc-s-A200: 0.98;
    --mtc-s-A400: 0.97;
    --mtc-s-A700: 0.95;

    --mtc-l-50: 0.12;
    --mtc-l-100: 0.3;
    --mtc-l-200: 0.5;
    --mtc-l-300: 0.7;
    --mtc-l-400: 0.86;
    --mtc-l-600: 0.87;
    --mtc-l-700: 0.66;
    --mtc-l-800: 0.45;
    --mtc-l-900: 0.16;
    --mtc-l-A100: 0.76;
    --mtc-l-A200: 0.64;
    --mtc-l-A400: 0.49;
    --mtc-l-A700: 0.44;

    --mtc-light-h: 0;
    --mtc-light-s: 0;
    --mtc-light-l: 100;
  }
}
