/*

  Material Theme Creator
  Version: 3.0.5

  Author: Artik Man [mail@artik.me, github.com/Artik-Man]
  Docs: https://artik-man.github.io/material-theme-creator/
  GitHub: https://github.com/Artik-Man/material-theme-creator

*/


/// Creates CSS Variables used in the "create-variables-from-color" mixin
@mixin mtc-init() {
  :root {
    --mtc-h-A100: 1;
    --mtc-h-A200: 1;
    --mtc-h-A400: 1;
    --mtc-h-A700: 1.01;

    --mtc-s-50: 0.91;
    --mtc-s-100: 0.98;
    --mtc-s-200: 0.96;
    --mtc-s-300: 0.95;
    --mtc-s-400: 0.96;
    --mtc-s-600: 1;
    --mtc-s-700: 0.99;
    --mtc-s-800: 0.89;
    --mtc-s-900: 0.86;
    --mtc-s-A100: 0.89;
    --mtc-s-A200: 0.98;
    --mtc-s-A400: 0.97;
    --mtc-s-A700: 0.95;

    --mtc-l-50: 0.12;
    --mtc-l-100: 0.3;
    --mtc-l-200: 0.5;
    --mtc-l-300: 0.7;
    --mtc-l-400: 0.86;
    --mtc-l-600: 0.87;
    --mtc-l-700: 0.66;
    --mtc-l-800: 0.45;
    --mtc-l-900: 0.16;
    --mtc-l-A100: 0.76;
    --mtc-l-A200: 0.64;
    --mtc-l-A400: 0.49;
    --mtc-l-A700: 0.44;

    --mtc-light-h: 0;
    --mtc-light-s: 0;
    --mtc-light-l: 100;
  }
}


/// Creates CSS Custom Properties for mat-palette from one color
/// @param {string} $theme-name (example: 'primary');
/// @param {color} $color CSS Color (#hex/rgb,hsl);
/// @param {percent} $contrast-threshold: 0%..100% (default: 50%);
///
/// @return CSS Custom Properties:
///  --primary: hsl(...);
///  --primary-50: hsl(...);
///  --primary-50-contrast: hsl(...);
///  --primary-100: hsl(...);
///  --primary-100-contrast: hsl(...);
///  ...
///  --primary-A700: hsl(...);
///  --primary-A700-contrast: hsl(...);
@mixin mtc-create-variables-from-color($theme-name, $color, $contrast-threshold: 50%) {
  @include mtc-update-theme($theme-name, $color, $contrast-threshold);

  --#{$theme-name}: hsla(var(--#{$theme-name}-h), calc(var(--#{$theme-name}-s) * 1%), calc(var(--#{$theme-name}-l) * 1%), #{alpha($color)});

  $theme-h: '--' + $theme-name + '-h';
  $theme-s: '--' + $theme-name + '-s';
  $theme-l: '--' + $theme-name + '-l';

  $arr_50_400: 50, 100, 200, 300, 400;
  @for $i from 1 through 5 {
    $index: nth($arr_50_400, $i);
    --#{$theme-name}-#{$index}-h: var(#{$theme-h});
    --#{$theme-name}-#{$index}-s: calc(((var(#{$theme-s}) - var(--mtc-light-s)) * var(#{'--mtc-s-' + $index}) + var(--mtc-light-s)) * 1%);
    --#{$theme-name}-#{$index}-l: calc(((var(#{$theme-l}) - var(--mtc-light-l)) * var(#{'--mtc-l-' + $index}) + var(--mtc-light-l)) * 1%);
    --#{$theme-name}-#{$index}: hsl(var(--#{$theme-name}-#{$index}-h), var(--#{$theme-name}-#{$index}-s), var(--#{$theme-name}-#{$index}-l));
    --#{$theme-name}-#{$index}-contrast: hsl(0, 0%, calc(((((1 - var(#{'--mtc-l-' + $index})) * 100 + var(#{'--mtc-l-' + $index}) * var(#{$theme-l})) * 1%) - var(#{'--' + $theme-name + '-contrast-threshold'}, 50%)) * (-100)));
  }

  --#{$theme-name+ '-500-h'}: var(#{$theme-h});
  --#{$theme-name+ '-500-s'}: calc(var(#{$theme-s}) * 1%);
  --#{$theme-name+ '-500-l'}: calc(var(#{$theme-l}) * 1%);

  --#{$theme-name + '-500'}: var(--#{$theme-name});
  --#{$theme-name + '-500-contrast'}: hsl(0, 0%, calc(((var(#{$theme-l}) * 1%) - var(#{'--' + $theme-name + '-contrast-threshold'}, 50%)) * (-100)));

  $arr_600_900: 600, 700, 800, 900;
  @for $i from 1 through 4 {
    $index: nth($arr_600_900, $i);
    --#{$theme-name}-#{$index}-h: var(#{$theme-h});
    --#{$theme-name}-#{$index}-s: calc(((1 - var(#{'--mtc-s-' + $index})) * 100 + var(#{'--mtc-s-' + $index}) * var(#{$theme-s})) * 1%);
    --#{$theme-name}-#{$index}-l: calc(((1 - var(#{'--mtc-l-' + $index})) * var(#{$theme-l}) * var(#{$theme-l}) / 100 + var(#{'--mtc-l-' + $index}) * var(#{$theme-l})) * 1%);
    --#{$theme-name}-#{$index}: hsl(var(--#{$theme-name}-#{$index}-h), var(--#{$theme-name}-#{$index}-s), var(--#{$theme-name}-#{$index}-l));
    --#{$theme-name}-#{$index}-contrast: hsl(0, 0%, calc(((((1 - var(#{'--mtc-l-' + $index})) * var(#{$theme-l}) * var(#{$theme-l}) / 100 + var(#{'--mtc-l-' + $index}) * var(#{$theme-l})) * 1%) - var(#{'--' + $theme-name + '-contrast-threshold'}, 50%)) * (-100)));
  }

  $arr_A00_A700: A100, A200, A400, A700;
  @for $i from 1 through 4 {
    $index: nth($arr_A00_A700, $i);
    --#{$theme-name}-#{$index}-h: calc(var(#{$theme-h}) * var(#{'--mtc-h-' + $index}));
    --#{$theme-name}-#{$index}-s: calc(var(#{'--mtc-s-' + $index}) * 100%);
    --#{$theme-name}-#{$index}-l: calc(var(#{'--mtc-l-' + $index}) * 100%);
    --#{$theme-name}-#{$index}: hsl(var(--#{$theme-name}-#{$index}-h), var(--#{$theme-name}-#{$index}-s), var(--#{$theme-name}-#{$index}-l));
    --#{$theme-name}-#{$index}-contrast: hsl(0, 0%, calc((var(#{'--mtc-l-' + $index}) * 100% - var(#{'--' + $theme-name + '-contrast-threshold'}, 50%)) * (-100)));
  }
}

/// Returns CSS Custom Properties: Hue, Lightness, Saturation for CSS Color and contrast threshold for this theme
/// @param {string} $theme-name (example: 'primary');
/// @param {color} $color CSS Color (#hex/rgb/hsl);
/// @param {number} $contrast-threshold - contrast threshold for theme
/// @return CSS Custom Properties:
///  --primary-h: 212;
///  --primary-s: 95;
///  --primary-l: 80;
///  --primary-contrast-threshold: 50%;
@mixin mtc-update-theme($theme-name, $color, $contrast-threshold: 50%) {
  --#{$theme-name}-h: #{str-slice(hue($color) + '', 0, -4)};
  --#{$theme-name}-s: #{str-slice(saturation($color) + '', 0, -2)};
  --#{$theme-name}-l: #{str-slice(lightness($color) + '', 0, -2)};
  --#{$theme-name}-contrast-threshold: #{$contrast-threshold};
}

/// Returns color (variable). Example: mtc-color('primary', 400, 95%)
/// @param {string} $theme-name (example: 'primary');
/// @param {string} $index: [50, 100, 200, 300, 400, 500, 600, 700, 800, 900, A100, A200, A400, A700];
/// @param {number} $alpha (default: 100%)
/// @returns hsla(...color)
@function mtc-color($theme-name, $index: 500, $alpha: 100%) {
  @return hsla(var(--#{$theme-name}-#{$index}-h), var(--#{$theme-name}-#{$index}-s), var(--#{$theme-name}-#{$index}-l), #{$alpha});
}

/// Returns contrast color (variable). Example: mtc-color-contrast('primary', 400)
/// @param {string} $theme-name (example: 'primary');
/// @param {string} $index: [50, 100, 200, 300, 400, 500, 600, 700, 800, 900, A100, A200, A400, A700];
/// @returns black or white
@function mtc-color-contrast($theme-name, $index: 500) {
  @return var(--#{$theme-name}-#{$index}-contrast);
}

/// Create diapason for transition light-dark. Use --is-dark-theme [0..1] variable to change number inside diapason
/// @param {number} $min - from
/// @param {number} $max - to
/// @param {any} $unit - 1%, 1deg, 1px, ...
/// @param {var} $dark-theme-variable
/// @return {calc(...)} diapason
@function mtc-theme-component($min:0, $max:100, $unit: 1, $dark-theme-variable: --is-dark-theme) {
  // L0 -> D100: calc((var(--is-dark-theme) * (max - min) + min) * 1%)
  // L100 -> D0: calc(((1 - var(--is-dark-theme)) * (max - min) + min) * 1%)
  $base: var(#{$dark-theme-variable});
  @if ($min > $max) {
    $temp: $min;
    $min: $max;
    $max: $temp;
    $base: calc(1 - var(#{$dark-theme-variable}));
  }
  @return calc((#{$base} * (#{$max} - #{$min}) + #{$min}) * #{$unit});
}

/// Create color-construction for transition light-dark. Use --is-dark-theme [0..1] variable to change color
/// @param $light {color} - light-theme color
/// @param $dark {color} - dark-theme color
/// @return {color} CSS color hsla(...)
@function mtc-theme-color($light, $dark) {
  @return hsla(
                  #{mtc-theme-component(hue($light), hue($dark))},
                  #{mtc-theme-component(saturation($light), saturation($dark))},
                  #{mtc-theme-component(lightness($light), lightness($dark))},
                  #{mtc-theme-component(opacity($light), opacity($dark), 100)}
  )
}
